{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;sBAMR,QAAQ;;oBACO,QAAQ;;;;wBACP,UAAU;;;;oBACX,QAAQ;;;;oBACR,QAAQ;;;;sBACN,UAAU;;;;yBACP,aAAa;;;;mBACtB,OAAO;;;;uBACA,WAAW;;;;4BACd,gBAAgB;;;;0BAClB,cAAc;;;;sBACV,UAAU;;;;;AAfhC,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAiB1B,IAAI,KAAK,GAAG;AACV,MAAI,EAAE,cAAU,IAAI,EAAE;AACpB,WAAO,sBAAY,IAAI,CAAC,CAAC;GAC1B;AACD,MAAI,EAAE,uBAAa;AACnB,QAAM,EAAE,yBAAe;AACvB,WAAS,EAAE,mBAAU,GAAG,EAAE;AACxB,WAAO,2BAAiB,GAAG,CAAC,CAAC;GAC9B;AACD,KAAG,kBAAK;AACR,MAAI,EAAE,SAAS,UAAU,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE;AACjD,QAAI,SAAS,GAAG,uBAAa,CAAC;AAC9B,QAAI,CAAC,QAAQ,IAAI,YA3BnB,UAAU,EA2BoB,OAAO,CAAC,EAAE;AACpC,cAAQ,GAAG,OAAO,CAAC;AACnB,aAAO,GAAG,IAAI,CAAC;KAChB;AACD,WAAO,sBAAS,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CACzD,OAAO,CAAC,QAAQ,CAAC,CAAC;GACtB;AACD,SAAO,EAAE,0BAAgB;AACzB,SAAO,2BAAS;AAChB,QAAM,yBAAO;AACb,QAAM,EAAE,yBAAe;CACxB,CAAC;;AAEF,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;;qBAEZ,KAAK","file":"index.js","sourcesContent":["'use strict';\n// need this for the Promise API\nrequire(\"babel/polyfill\");\nimport {\n  isFunction\n}\nfrom 'lodash';\nimport LockAPI from './lock';\nimport Bluebird from 'bluebird';\nimport DataAPI from './data';\nimport UserAPI from './user';\nimport EventsAPI from './events';\nimport ConnectorAPI from './connector';\nimport log from './log';\nimport TimeoutAPI from './timeout';\nimport Context from '@hoist/context';\nimport Model from '@hoist/model';\nimport BucketAPI from './bucket';\n\nlet index = {\n  data: function (type) {\n    return new DataAPI(type);\n  },\n  user: new UserAPI(),\n  events: new EventsAPI(),\n  connector: function (key) {\n    return new ConnectorAPI(key);\n  },\n  log: log,\n  lock: function CreateLock(name, timeout, callback) {\n    let hoistLock = new LockAPI();\n    if (!callback && isFunction(timeout)) {\n      callback = timeout;\n      timeout = null;\n    }\n    return Bluebird.resolve(hoistLock.aquireLock(name, timeout))\n      .nodeify(callback);\n  },\n  timeout: new TimeoutAPI(),\n  Context: Context,\n  _model: Model,\n  bucket: new BucketAPI()\n};\n\nindex.event = index.events;\n\nexport default index;\n"],"sourceRoot":"/source/"}