{"version":3,"sources":["data.js"],"names":[],"mappings":"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","file":"data.js","sourcesContent":["'use strict';\nimport Pipeline from '@hoist/data-pipeline';\nimport errors from '@hoist/errors';\nimport Bluebird from 'bluebird';\nimport BaseAPI from './base_api';\n\n/**\n * Hoists Data API\n */\nclass DataAPI extends BaseAPI {\n  /**\n   * create a new data API\n   * @param {string} [type] - the object type for this data api instance\n   */\n  constructor(type) {\n    super();\n    if (type) {\n      this.setType(type);\n    }\n    this._pipeline = new Pipeline();\n  }\n\n  _verify() {\n    return Promise.resolve().then(() => {\n      if (!this._type) {\n        throw new errors.data.request.InvalidError('you need to specify a type for the retrieval, call #setType([typename]) first');\n      }\n    });\n  }\n\n  /**\n   * set the type of this Data API instance\n   * @param {string} type - the object type for this data api instance\n   */\n  setType(type) {\n    this._type = type.toLowerCase();\n  }\n\n  /**\n   * find objects matching the given query\n   * @param {object} query - the mongo style query\n   * @param {function(error: Error, objects: Array<object>)} [callback] - callback to call when objects have been found\n   * @returns {Promise<Array<object>>} - a promise to have retrieved the objects\n   */\n  find(query, callback) {\n    return Bluebird.resolve(\n        this._verify()\n        .then(() => {\n          return this._pipeline.find(this._type, query || {});\n        }))\n      .nodeify(callback);\n  }\n\n  /**\n   * find a single object with the matching id\n   * @param {string} id - the object id\n   * @param {function(error: Error, object: object)} [callback] - callback to call when object has been found\n   * @returns {Promise<object>} - a promise to have retrieved the object\n   */\n  findById(id, callback) {\n    return Bluebird.resolve(\n        Promise.resolve()\n        .then(() => {\n          if (!id) {\n            throw new errors.data.request.InvalidError('you need to specify an id for #findById');\n          }\n        })\n        .then(() => {\n          return this.findOne({\n            _id: id\n          });\n        }))\n      .nodeify(callback);\n  }\n\n  /**\n   * find a single object matching the given query\n   * @param {object} query - the mongo style query\n   * @param {function(error: Error, object: object)} [callback] - callback to call when object has been found\n   * @returns {Promise<object>} - a promise to have retrieved the object\n   */\n  findOne(query, callback) {\n    return Bluebird.resolve(\n        Promise.resolve()\n        .then(() => {\n          if (!query) {\n            throw new errors.data.request.InvalidError('you need to specify a query for #findOne');\n          }\n        })\n        .then(() => {\n          return this._verify();\n        })\n        .then(() => {\n          return this._pipeline.findOne(this._type, query);\n        }))\n      .nodeify(callback);\n  }\n\n  /**\n   * remove objects matching the given query\n   * @param {object} query - the mongo style query\n   * @param {function(error: Error)} [callback] - callback to call when objects have been removed\n   * @returns {Promise} - a promise to have removed the objects\n   */\n  remove(query, callback) {\n    return Bluebird.resolve(\n        Promise.resolve()\n        .then(() => {\n          if (!query) {\n            throw new errors.data.request.InvalidError('you need to specify a query for #remove');\n          }\n        })\n        .then(() => {\n          return this._verify();\n        })\n        .then(() => {\n          return this._pipeline.remove(this._type, query);\n        }))\n      .nodeify(callback);\n  }\n\n  /**\n   * remove a single object with a given id\n   * @param {string} id - the object id\n   * @param {function(error: Error)} [callback] - callback to call when object has been removed\n   * @returns {Promise} - a promise to have removed the object\n   */\n  removeOneById(id, callback) {\n    return Bluebird.resolve(\n        Promise.resolve()\n        .then(() => {\n          if (!id) {\n            throw new errors.data.request.InvalidError('you need to specify an id for #removeOneById');\n          }\n        })\n        .then(() => {\n          return this._verify();\n        })\n        .then(() => {\n          return this._pipeline.remove(this._type, {\n            _id: id\n          });\n        }))\n      .nodeify(callback);\n  }\n\n  /**\n   * save an object\n   * @param {object} json - raw object to save\n   * @param {function(error: Error, object: object)} [callback] - callback to call when objects has been saved\n   * @returns {Promise<object>} - a promise to have saved the object\n   */\n  save(json, callback) {\n    if (!this._type && json._type) {\n      this.setType(json._type);\n    }\n    return Bluebird.resolve(\n      this._verify()\n      .then(() => {\n        return this._pipeline.save(this._type, json);\n      })).nodeify(callback);\n  }\n}\n\nDataAPI.disconnect = function () {\n  return Pipeline._mongoConnection.close();\n};\n\n\nexport default DataAPI;\n"],"sourceRoot":"/source/"}