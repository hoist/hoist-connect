{"version":3,"sources":["bucket.js"],"names":[],"mappings":"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","file":"bucket.js","sourcesContent":["'use strict';\nimport Errors from '@hoist/errors';\nimport Pipeline from '@hoist/bucket-pipeline';\nimport Bluebird from 'bluebird';\nimport BaseAPI from './base_api';\nimport Context from '@hoist/context';\n/**\n * API entry for creating buckets\n * as with most API classes this acts more as a wrapper\n * over the Pipeline methods in {@link BucketPipeline}\n */\nclass BucketAPI extends BaseAPI {\n  /**\n   * create a new BucketAPI\n   */\n  constructor() {\n    super();\n    this._pipeline = new Pipeline();\n  }\n\n  /**\n   * add a new Bucket\n   * @param {String} key - the key of the bucket to create, must be unique\n   * @param {Object} [meta] - the meta data to save against the bucket\n   * @param {function(error: Error, bucket: Bucket)} [callback] - callback to call when bucket has been created\n   * @returns {Promise<Bucket>} - a promise to have created the bucket\n   **/\n  add(key, meta, callback) {\n    if (!callback && typeof meta === 'function') {\n      callback = meta;\n      meta = null;\n    }\n    if (!callback && !meta && typeof key === 'function') {\n      callback = key;\n      key = null;\n      meta = null;\n    }\n    return Bluebird.resolve(Context.get().then((context) => {\n        return Promise.resolve(this._pipeline.add(context, key, meta));\n      }))\n      .nodeify(callback);\n  }\n\n  /**\n   * set the current bucket in the Hoist context\n   * @param {String} key - the key of the bucket to set\n   * @param {Boolean} [create=false] - if the bucket isn't found should it be created?\n   * @param {function(error: Error, bucket: Bucket)} [callback] - callback to call when bucket has been set\n   * @returns {Promise<Bucket>} - a promise to have set the bucket\n   */\n  set(key, create, callback) {\n    if (!callback && typeof create === 'function') {\n      callback = create;\n      create = null;\n    }\n    if (!key || typeof key === 'function') {\n      throw new Errors.bucket.InvalidError('No key specified to set current bucket');\n    }\n    return Bluebird.resolve(Context.get().then((context) => {\n        return Promise.resolve(this._pipeline.set(context, key, create));\n      }))\n      .nodeify(callback);\n  }\n\n  /**\n   * get a bucket specified by the key\n   * @param {String} key - the key of the bucket to get\n   * @param {function(error: Error, bucket: Bucket)} [callback] - callback to call when bucket has been retrieved\n   * @returns {Promise<Bucket>} - a promise to have found the bucket\n   */\n  get(key, callback) {\n    if (!callback && typeof key === 'function') {\n      callback = key;\n      key = null;\n    }\n    return Bluebird.resolve(Context.get().then((context) => {\n        return Promise.resolve(this._pipeline.get(context, key));\n      }))\n      .nodeify(callback);\n  }\n\n  /**\n   * remove/delete a bucket specified by the key\n   * @param {String} key - the key of the bucket to remove\n   * @param {function(error: Error)} [callback] - callback to call when bucket has been removed\n   * @returns {Promise} - a promise to have removed the bucket\n   */\n  remove(key, callback) {\n    if (!callback && typeof key === 'function') {\n      callback = key;\n      key = null;\n    }\n    return Bluebird.resolve(Context.get().then((context) => {\n        return Promise.resolve(this._pipeline.remove(context, key));\n      }))\n      .nodeify(callback);\n  }\n\n  /**\n   * get a list of all buckets in the organisation\n   * @param {function(error: Error, buckets: Array<Bucket>)} [callback] - callback to call when list has been retrieved\n   * @returns {Promise<Array<Bucket>>} - a promise to have retrieved the buckets\n   */\n  getAll(callback) {\n    return Bluebird.resolve(Context.get().then((context) => {\n        return Promise.resolve(this._pipeline.getAll(context));\n      }))\n      .nodeify(callback);\n  }\n\n  /**\n   * apply a function to every bucket in the current application\n   * @param {function(bucket: Bucket)} fn - function to apply to each bucket\n   * @param {function(error: Error)} [callback] - callback to call when all buckets have been applied\n   * @returns {Promise} - a promise to have run the function against each bucket\n   */\n  each(fn, callback) {\n    if (typeof fn !== 'function') {\n      throw new Errors.bucket.InvalidError('No function given in each');\n    }\n    return Bluebird.resolve().then(() => {\n        return Context.get().then((context) => {\n          return Promise.resolve(this._pipeline.each(context, fn));\n        });\n      })\n      .nodeify(callback);\n  }\n\n  /**\n   * save/update metadata against a bucket\n   * @param {Object} meta - the meta data to save against the bucket\n   * @param {String} [key] - the key of the bucket to save data to, applies to current bucket if not supplied\n   * @param {function(error: Error)} [callback] - callback to call when all buckets have been applied\n   * @returns {Promise} - a promise to have applied the meta data\n   */\n  saveMeta(meta, key, callback) {\n    if (!callback && typeof key === 'function') {\n      callback = key;\n      key = null;\n    }\n    return Bluebird.resolve(Context.get().then((context) => {\n        return Promise.resolve(this._pipeline.saveMeta(context, meta, key));\n      }))\n      .nodeify(callback);\n  }\n}\n\nexport default BucketAPI;\n"],"sourceRoot":"/source/"}