{"version":3,"sources":["bucket.js"],"names":[],"mappings":"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","file":"bucket.js","sourcesContent":["'use strict';\nimport Errors from '@hoist/errors';\nimport Pipeline from '@hoist/bucket-pipeline';\nimport Bluebird from 'bluebird';\nimport BaseAPI from './base_api';\n/**\n * API entry for creating buckets\n * as with most API classes this acts more as a wrapper\n * over the Pipeline methods in {@link BucketPipeline}\n */\nclass BucketAPI extends BaseAPI {\n  /**\n   * create a new BucketAPI\n   */\n  constructor() {\n    super();\n    this._pipeline = new Pipeline();\n  }\n\n  /**\n   * add a new Bucket\n   * @param {String} key - the key of the bucket to create, must be unique\n   * @param {Object} [meta] - the meta data to save against the bucket\n   * @param {function(error: Error, bucket: Bucket)} [callback] - callback to call when bucket has been created\n   * @returns {Promise<Bucket>} - a promise to have created the bucket\n   **/\n  add(key, meta, callback) {\n    if (!callback && typeof meta === 'function') {\n      callback = meta;\n      meta = null;\n    }\n    if (!callback && !meta && typeof key === 'function') {\n      callback = key;\n      key = null;\n      meta = null;\n    }\n    return Bluebird.resolve(this._pipeline.add(key, meta))\n      .nodeify(callback);\n  }\n\n  /**\n   * set the current bucket in the Hoist context\n   * @param {String} key - the key of the bucket to set\n   * @param {Boolean} [create=false] - if the bucket isn't found should it be created?\n   * @param {function(error: Error, bucket: Bucket)} [callback] - callback to call when bucket has been set\n   * @returns {Promise<Bucket>} - a promise to have set the bucket\n   */\n  set(key, create, callback) {\n    if (!callback && typeof create === 'function') {\n      callback = create;\n      create = null;\n    }\n    if (!key || typeof key === 'function') {\n      throw new Errors.bucket.InvalidError('No key specified to set current bucket');\n    }\n    return Bluebird.resolve(this._pipeline.set(key, create))\n      .nodeify(callback);\n  }\n\n  /**\n   * get a bucket specified by the key\n   * @param {String} key - the key of the bucket to get\n   * @param {function(error: Error, bucket: Bucket)} [callback] - callback to call when bucket has been retrieved\n   * @returns {Promise<Bucket>} - a promise to have found the bucket\n   */\n  get(key, callback) {\n    if (!callback && typeof key === 'function') {\n      callback = key;\n      key = null;\n    }\n    return Bluebird.resolve(this._pipeline.get(key))\n      .nodeify(callback);\n  }\n\n  /**\n   * remove/delete a bucket specified by the key\n   * @param {String} key - the key of the bucket to remove\n   * @param {function(error: Error)} [callback] - callback to call when bucket has been removed\n   * @returns {Promise} - a promise to have removed the bucket\n   */\n  remove(key, callback) {\n    if (!callback && typeof key === 'function') {\n      callback = key;\n      key = null;\n    }\n    return Bluebird.resolve(this._pipeline.remove(key))\n      .nodeify(callback);\n  }\n\n  /**\n   * get a list of all buckets in the organisation\n   * @param {function(error: Error, buckets: Array<Bucket>)} [callback] - callback to call when list has been retrieved\n   * @returns {Promise<Array<Bucket>>} - a promise to have retrieved the buckets\n   */\n  getAll(callback) {\n    return Bluebird.resolve(this._pipeline.getAll())\n      .nodeify(callback);\n  }\n\n  /**\n   * apply a function to every bucket in the current application\n   * @param {function(bucket: Bucket)} fn - function to apply to each bucket\n   * @param {function(error: Error)} [callback] - callback to call when all buckets have been applied\n   * @returns {Promise} - a promise to have run the function against each bucket\n   */\n  each(fn, callback) {\n    if (typeof fn !== 'function') {\n      throw new Errors.bucket.InvalidError('No function given in each');\n    }\n    return Bluebird.resolve().then(() => {\n        this._pipeline.each(fn);\n      })\n      .nodeify(callback);\n  }\n\n  /**\n   * save/update metadata against a bucket\n   * @param {Object} meta - the meta data to save against the bucket\n   * @param {String} [key] - the key of the bucket to save data to, applies to current bucket if not supplied\n   * @param {function(error: Error)} [callback] - callback to call when all buckets have been applied\n   * @returns {Promise} - a promise to have applied the meta data\n   */\n  saveMeta(meta, key, callback) {\n    if (!callback && typeof key === 'function') {\n      callback = key;\n      key = null;\n    }\n    return Bluebird.resolve(this._pipeline.saveMeta(meta, key))\n      .nodeify(callback);\n  }\n}\n\nexport default BucketAPI;\n"],"sourceRoot":"/source/"}