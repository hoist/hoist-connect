{"version":3,"sources":["connector.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;2BACM,eAAe;;;;sCACb,2BAA2B;;;;wBAC5B,YAAY;;;;sBAI3B,QAAQ;;2BACM,eAAe;;;;wBACb,UAAU;;;;;;;;IAIzB,YAAY;;;;;;AAKL,WALP,YAAY,CAKJ,GAAG,EAAE;0BALb,YAAY;;AAMd,+BANE,YAAY,6CAMN;AACR,QAAI,CAAC,OAAO,GAAG,yBAAO,KAAK,CAAC;AAC1B,SAAG,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;KAC3B,CAAC,CAAC;AACH,QAAI,CAAC,GAAG,EAAE;AACR,YAAM,IAAI,yBAAO,SAAS,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;KACnD;AACD,QAAI,CAAC,SAAS,GAAG,yCAAc,CAAC;AAChC,QAAI,CAAC,IAAI,GAAG,GAAG,CAAC;AAChB,QAAI,CAAC,cAAc,EAAE,CAAC;GACvB;;YAhBG,YAAY;;eAAZ,YAAY;;WAiBF,0BAAG;;;AACf,UAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AACpB,YAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAK;AACpE,cAAI,OAAO,GAAG,YA5BpB,MAAM,EA4BqB,YA5BnB,SAAS,EA4BoB,CAAC,CAAC,EAAE,UAAC,QAAQ,EAAK;AAC/C,gBAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,QAAQ,KAAK,eAAe,IAAI,OAAK,QAAQ,CAAC,EAAE;AAC9E,qBAAO,KAAK,CAAC;aACd,MAAM;AACL,qBAAO,IAAI,CAAC;aACb;WACF,CAAC,CAAC;AACH,iBAAO,CAAC,OAAO,CAAC,UAAC,MAAM,EAAK;;;;AAI1B,gBAAI,KAAK,SAAO,CAAC;AACjB,mBAAK,MAAM,CAAC,GAAG,YAAY;AACzB,mBAAK,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,CAAC;AAChD,kBAAI,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,UAAU,EAAE;AACnC,sBAAM,IAAI,yBAAO,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC,MAAM,GAAG,qBAAqB,CAAC,CAAC;eACrF;AACD,kBAAI,QAAQ,YAAA,CAAC;AACb,kBAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACjD,kBAAI,OAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,AAAC,KAAK,UAAU,EAAE;AACjD,wBAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;eACvB;AACD,qBAAO,sBAAS,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAC9C,OAAO,CAAC,QAAQ,CAAC,CAAC;aACtB,CAAC;WACH,CAAC,CAAC;SACJ,CAAC,CAAC;OAEJ;AACD,aAAO,IAAI,CAAC,UAAU,CAAC;KACxB;;;SAlDG,YAAY;;;qBAqDH,YAAY","file":"connector.js","sourcesContent":["'use strict';\nimport errors from '@hoist/errors';\nimport Pipeline from '@hoist/connector-pipeline';\nimport BaseAPI from './base_api';\nimport {\n  filter, functions\n}\nfrom 'lodash';\nimport logger from '@hoist/logger';\nimport Bluebird from 'bluebird';\n/**\n * Hoists API wrapper around connectors\n */\nclass ConnectorAPI extends BaseAPI {\n  /**\n   * create a new connector API\n   * @param {string} key - the connector key\n   */\n  constructor(key) {\n    super();\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n    if (!key) {\n      throw new errors.connector.request.InvalidError();\n    }\n    this._pipeline = new Pipeline();\n    this._key = key;\n    this._loadConnector();\n  }\n  _loadConnector() {\n    if (!this._connector) {\n      this._connector = this._pipeline.loadConnector(this._key).then((c) => {\n        let methods = filter(functions(c), (property) => {\n          if (property.startsWith('_') || property === 'receiveBounce' || this[property]) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        methods.forEach((method) => {\n          /**\n           * also has all methods of underlying connector\n           */\n          let _this = this;\n          this[method] = function () {\n            _this._logger.info('proxying method ' + method);\n            if (typeof c[method] !== 'function') {\n              throw new errors.connector.request.UnsupportedError(method + ' method unsupported');\n            }\n            let callback;\n            let args = Array.prototype.slice.call(arguments);\n            if (typeof (args[args.length - 1]) === 'function') {\n              callback = args.pop();\n            }\n            return Bluebird.resolve(c[method].apply(c, args))\n              .nodeify(callback);\n          };\n        });\n      });\n\n    }\n    return this._connector;\n  }\n}\n\nexport default ConnectorAPI;\n"],"sourceRoot":"/source/"}