{"version":3,"sources":["lock.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;sBACM,QAAQ;;;;yBACL,YAAY;;;;qBAChB,OAAO;;;;wBACL,YAAY;;;;AAEhC,IAAI,MAAM,YAAA,CAAC;;;;;IAIL,YAAY;;;;;;AAKL,WALP,YAAY,GAKF;0BALV,YAAY;;AAMd,+BANE,YAAY,6CAMN;GACT;;YAPG,YAAY;;eAAZ,YAAY;;;;;;;;;WAeN,oBAAC,IAAI,EAAE,OAAO,EAAE;AACxB,aAAO,GAAG,OAAO,IAAI,GAAG,CAAC;AACzB,YAAM,GAAG,YAAY,CAAC,UAAU,EAAE,CAAC;AACnC,UAAI,IAAI,GAAG,4BAAU,MAAM,CAAC,CAAC;AAC7B,aAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAK;AAC9B,YAAI,CAAC,IAAI,EAAE,OAAO,EAAE,UAAC,IAAI,EAAK;;;;AAI5B,iBAAO,CAAC;AACN,mBAAO,EAAE,IAAI;WACd,CAAC,CAAC;SACJ,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;SA7BG,YAAY;;;AAiClB,YAAY,CAAC,UAAU,GAAG,YAAY;AACpC,SAAO,MAAM,KAAK,MAAM,GAAG,mBAAM,YAAY,CAAC,oBAAO,GAAG,CAAC,kBAAkB,CAAC,EAAE,oBAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAA,AAAC,CAAC;CAChH,CAAC;AACF,YAAY,CAAC,YAAY,GAAG,YAAY;AACtC,MAAI,MAAM,EAAE;AACV,UAAM,CAAC,GAAG,EAAE,CAAC;AACb,UAAM,GAAG,IAAI,CAAC;GACf;CACF,CAAC;;qBAIa,YAAY","file":"lock.js","sourcesContent":["'use strict';\nimport config from 'config';\nimport redisLock from 'redis-lock';\nimport redis from 'redis';\nimport BaseAPI from './base_api';\n\nlet client;\n/**\n * Hoists lock API\n */\nclass HoistLockAPI extends BaseAPI {\n\n  /**\n   * create new lock\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * aquire a lock within the given timeout\n   * @param {string} name - the key for the lock\n   * @param {Number} [timeout=500] - the timeout to wait for the lock\n   * @returns {Promise} - promise to have aquired the lock\n   */\n  aquireLock(name, timeout) {\n    timeout = timeout || 500;\n    client = HoistLockAPI._getClient();\n    let lock = redisLock(client);\n    return new Promise((resolve) => {\n      lock(name, timeout, (done) => {\n        /*\n         * release the current lock\n         */\n        resolve({\n          release: done\n        });\n      });\n    });\n  }\n}\n\n\nHoistLockAPI._getClient = function () {\n  return client || (client = redis.createClient(config.get('Hoist.redis.port'), config.get('Hoist.redis.host')));\n};\nHoistLockAPI._clearClient = function () {\n  if (client) {\n    client.end();\n    client = null;\n  }\n};\n\n\n\nexport default HoistLockAPI;\n"],"sourceRoot":"/source/"}