{"version":3,"sources":["lock.js"],"names":[],"mappings":"AAAA;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAI,eAAJ;;;;;IAIM;;;;;;;AAKJ,WALI,YAKJ,GAAc;0BALV,cAKU;;kEALV,0BAKU;GAAd;;;;;;;;;;eALI;;+BAeO,MAAM,SAAS;AACxB,gBAAU,WAAW,GAAX,CADc;AAExB,eAAS,aAAa,UAAb,EAAT,CAFwB;AAGxB,UAAI,OAAO,yBAAU,MAAV,CAAP,CAHoB;AAIxB,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,aAAK,IAAL,EAAW,OAAX,EAAoB,UAAC,IAAD,EAAU;;;;AAI5B,kBAAQ;AACN,qBAAS,IAAT;WADF,EAJ4B;SAAV,CAApB,CAD8B;OAAb,CAAnB,CAJwB;;;;SAftB;;;AAgCN,SAAS,YAAT,GAAwB;AACtB,MAAI,iBAAO,GAAP,CAAW,uBAAX,KAAuC,iBAAO,GAAP,CAAW,uBAAX,CAAvC,EAA4E;AAC9E,WAAO,8BAAc,YAAd,CAA2B;AAChC,YAAM,iBAAO,GAAP,CAAW,kBAAX,CAAN;AACA,YAAM,iBAAO,GAAP,CAAW,kBAAX,CAAN;AACA,kBAAY,iBAAO,GAAP,CAAW,wBAAX,CAAZ;KAHK,CAAP,CAD8E;GAAhF,MAMO;AACL,WAAO,gBAAM,YAAN,CAAmB,iBAAO,GAAP,CAAW,kBAAX,CAAnB,EAAmD,iBAAO,GAAP,CAAW,kBAAX,CAAnD,CAAP,CADK;GANP;CADF;;AAYA,aAAa,UAAb,GAA0B,YAAY;AACpC,SAAO,WAAW,SAAS,cAAT,CAAX,CAD6B;CAAZ;AAG1B,aAAa,YAAb,GAA4B,YAAY;AACtC,MAAI,MAAJ,EAAY;AACV,WAAO,GAAP,CAAW,IAAX,EADU;AAEV,aAAS,IAAT,CAFU;GAAZ;CAD0B;;kBASb","file":"lock.js","sourcesContent":["'use strict';\nimport config from 'config';\nimport redisLock from 'redis-lock';\nimport redis from 'redis';\nimport redisSentinel from 'redis-sentinel-client';\nimport BaseAPI from './base_api';\n\nlet client;\n/**\n * Hoists lock API\n */\nclass HoistLockAPI extends BaseAPI {\n\n  /**\n   * create new lock\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * aquire a lock within the given timeout\n   * @param {string} name - the key for the lock\n   * @param {Number} [timeout=500] - the timeout to wait for the lock\n   * @returns {Promise} - promise to have aquired the lock\n   */\n  aquireLock(name, timeout) {\n    timeout = timeout || 500;\n    client = HoistLockAPI._getClient();\n    let lock = redisLock(client);\n    return new Promise((resolve) => {\n      lock(name, timeout, (done) => {\n        /*\n         * release the current lock\n         */\n        resolve({\n          release: done\n        });\n      });\n    });\n  }\n}\n\nfunction createClient() {\n  if (config.has('Hoist.redis.clustered') && config.get('Hoist.redis.clustered')) {\n    return redisSentinel.createClient({\n      host: config.get('Hoist.redis.host'),\n      port: config.get('Hoist.redis.port'),\n      masterName: config.get('Hoist.redis.masterName')\n    });\n  } else {\n    return redis.createClient(config.get('Hoist.redis.port'), config.get('Hoist.redis.host'));\n  }\n}\n\nHoistLockAPI._getClient = function () {\n  return client || (client = createClient());\n};\nHoistLockAPI._clearClient = function () {\n  if (client) {\n    client.end(true);\n    client = null;\n  }\n};\n\n\n\nexport default HoistLockAPI;\n"],"sourceRoot":"/source/"}