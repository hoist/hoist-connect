{"version":3,"sources":["timeout.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;4BACO,gBAAgB;;;;2BACjB,eAAe;;;;sBAI7B,QAAQ;;wBACO,YAAY;;;;;;;;IAK1B,UAAU;WAAV,UAAU;0BAAV,UAAU;;+BAAV,UAAU;;;YAAV,UAAU;;eAAV,UAAU;;;;;;;;WAMT,eAAC,YAAY,EAAE;;;AAGlB,aAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,YAAM;;AAElC,YAAI,CAAC,YAAY,IAAI,CAAC,YAnB1B,QAAQ,EAmB2B,YAAY,CAAC,IAAI,YAAY,GAAG,MAAM,IAAI,YAAY,GAAG,CAAC,EAAE;AACzF,gBAAM,IAAI,yBAAO,OAAO,CAAC,wBAAwB,EAAE,CAAC;SACrD;;AAED,eAAO,0BAAQ,GAAG,EAAE,CAAC,IAAI,CAAC,UAAC,OAAO,EAAK;AACrC,cAAI,OAAO,CAAC,OAAO,EAAE;AACnB,wBAAY,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACtC,mBAAO,CAAC,OAAO,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;WAC/E;SACF,CAAC,CAAC;OACJ,CAAC,CAAC;KAEJ;;;SAvBG,UAAU;;;qBA2BD,UAAU","file":"timeout.js","sourcesContent":["'use strict';\nimport Context from '@hoist/context';\nimport Errors from '@hoist/errors';\nimport {\n  isNumber\n}\nfrom 'lodash';\nimport BaseAPI from './base_api';\n\n/**\n * the Hoist Timeout API\n */\nclass TimeoutAPI extends BaseAPI {\n  /**\n   * reset the timeout from now\n   * @param {Number} milliseconds - the amount of time to timeout from now (between 1 and 120000)\n   * @returns {Promise}\n   */\n  reset(milliseconds) {\n    //upper bound at 2m\n    //lower bound at 1s\n    return Promise.resolve().then(() => {\n\n      if (!milliseconds || !isNumber(milliseconds) || milliseconds > 120000 || milliseconds < 1) {\n        throw new Errors.timeout.InvalidTimeoutValueError();\n      }\n\n      return Context.get().then((context) => {\n        if (context.timeout) {\n          clearTimeout(context.timeout.current);\n          context.timeout.current = setTimeout(context.timeout.onTimeout, milliseconds);\n        }\n      });\n    });\n\n  }\n}\n\n\nexport default TimeoutAPI;\n"],"sourceRoot":"/source/"}