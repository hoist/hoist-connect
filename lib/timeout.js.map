{"version":3,"sources":["timeout.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAYM;;;;;;;;;;;;;;;;;0BAME,cAAc;;;AAGlB,aAAO,QAAQ,OAAR,GAAkB,IAAlB,CAAuB,YAAM;;AAElC,YAAI,CAAC,YAAD,IAAiB,CAAC,sBAAS,YAAT,CAAD,IAA2B,eAAe,MAAf,IAAyB,eAAe,CAAf,EAAkB;AACzF,gBAAM,IAAI,iBAAO,OAAP,CAAe,wBAAf,EAAV,CADyF;SAA3F;;AAIA,eAAO,kBAAQ,GAAR,GAAc,IAAd,CAAmB,UAAC,OAAD,EAAa;AACrC,cAAI,QAAQ,OAAR,EAAiB;AACnB,yBAAa,QAAQ,OAAR,CAAgB,OAAhB,CAAb,CADmB;AAEnB,oBAAQ,OAAR,CAAgB,OAAhB,GAA0B,WAAW,QAAQ,OAAR,CAAgB,SAAhB,EAA2B,YAAtC,CAA1B,CAFmB;WAArB;SADwB,CAA1B,CANkC;OAAN,CAA9B,CAHkB;;;;SANhB;;;kBA2BS","file":"timeout.js","sourcesContent":["'use strict';\nimport Context from '@hoist/context';\nimport Errors from '@hoist/errors';\nimport {\n  isNumber\n}\nfrom 'lodash';\nimport BaseAPI from './base_api';\n\n/**\n * the Hoist Timeout API\n */\nclass TimeoutAPI extends BaseAPI {\n  /**\n   * reset the timeout from now\n   * @param {Number} milliseconds - the amount of time to timeout from now (between 1 and 120000)\n   * @returns {Promise}\n   */\n  reset(milliseconds) {\n    //upper bound at 2m\n    //lower bound at 1s\n    return Promise.resolve().then(() => {\n\n      if (!milliseconds || !isNumber(milliseconds) || milliseconds > 120000 || milliseconds < 1) {\n        throw new Errors.timeout.InvalidTimeoutValueError();\n      }\n\n      return Context.get().then((context) => {\n        if (context.timeout) {\n          clearTimeout(context.timeout.current);\n          context.timeout.current = setTimeout(context.timeout.onTimeout, milliseconds);\n        }\n      });\n    });\n\n  }\n}\n\n\nexport default TimeoutAPI;\n"],"sourceRoot":"/source/"}